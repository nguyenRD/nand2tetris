// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		Mux16(a=instruction, b=ALUoutput , sel=instruction[15], out=m1Out);
		Not(in=instruction[15], out=Ni);
		Or(a=Ni, b=instruction[5], out=loadA);
		ARegister(in=m1Out, load=loadA, out=arOut, out[0..14]=addressM, out=ARoutput);
		Mux16(a=arOut, b=inM, sel=instruction[12], out=m2Out);
		DRegister(in=ALUoutput , load=dLoad, out=drOut);
		ALU(x=drOut , y= m2Out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr=zr, ng=ng);
		
		
		Not(in=ng, out=Nng);
		Not(in=zr, out=Nzr);
		Or(a=ng, b=zr, out=Nps);
		Not(in=Nps, out=ps);
		DMux8Way(in=true, sel=instruction[0..2], a=pcLoad1, b=b2, c=c2, d=d2, e=e2, f=f2, g=g2, h=pcLoad8); 
		And(a=ps, b=b2, out=pcLoad2);
		And(a=zr, b=c2, out=pcLoad3);
		And(a=Nng, b=d2, out=pcLoad4);
		And(a=ng, b=e2, out=pcLoad5);
		And(a=Nzr, b=f2, out=pcLoad6);
		And(a=Nps, b=g2, out=pcLoad7);
		Or8Way(in[0]=false, in[1]=pcLoad2, in[2]=pcLoad3, in[3]=pcLoad4, in[4]=pcLoad5, in[5]=pcLoad6, in[6]=pcLoad7, in[7]=pcLoad8, out=pcLoad9);
		Not(in=pcLoad1, out=npcLoad1);
		And(a=npcLoad1, b=pcLoad9, out=pcLoad10);
		Mux(a=false, b=pcLoad10, sel=instruction[15], out=pcLoad);	
		PC(in=ARoutput, reset=reset, load=pcLoad, inc=true, out[0..14]=pc);
		
		DMux8Way(in=true, sel=instruction[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
		Or8Way(in[0]=b, in[1]=d, in[2]=f, in[3]=h, in[4]=b, in[5]=d, in[6]=f, in[7]=h, out=writeMinstruction);
		And(a=instruction[15], b=writeMinstruction, out=writeM);
		Or8Way(in[0]=c, in[1]=d, in[2]=g, in[3]=h, in[4]=c, in[5]=d, in[6]=g, in[7]=h, out=dLoadinstruction);
		And(a=instruction[15], b=dLoadinstruction, out=dLoad);
		
}